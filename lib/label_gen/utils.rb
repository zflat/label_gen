require 'thor'

module LabelGen
  class Utils < Thor
    
    desc "gen_pages N", "Generates the next N pages of labels as a PDF"
    method_option :path, 
    :type => :string, :default => nil, 
    :desc => "Full file path including file name where the generated PDF will be saved"
    def gen_pages(n_pages)
      n_pages = n_pages.to_f
      path = options[:path] || LabelGen.configuration.output_path
      render_pdf(total_label_count(n_pages), n_pages, path)
    end

    desc "gen_labels N", "Generates the next N labels rendered to PDF"
    method_option :path, 
    :type => :string, :default =>  nil, 
    :desc => "Full file path including file name where the generated PDF will be saved"
    method_option :force, 
    :type => :boolean, :default =>  false, 
    :desc => "Force the labels to be generated, even if it requires overriding the default behaviour to only render labels if they fill an exact number of pages"
    def gen_labels(n_labels)
      n_labels = n_labels.to_f
      path = options[:path] || LabelGen.configuration.output_path
      
      if fill_exact_pages?(n_labels) || options[:force]
        render_pdf(n_labels, total_page_count(n_labels), path)      
      else
        puts "No labels were generated"
        puts "The number of labels specified does not fill an exact number of pages."
        puts "Please specify an amount to fill exact pages or use the --force option to override"
      end
    end

    desc "confirm_printed MAX_NUMBER", "Update the highest number printed with MAX_NUMBER"
    def confirm_printed(max_number)
      max_number = max_number.to_i
      if NumberRecord.confirm_used(max_number)
        puts "The max number printed has been recorded as #{max_number}. Numbers less than #{max_number} will no longer be generated."
      else
        puts "ERROR: The max number printed could not be updated. New numbers less than #{max_number} may still be generated."
      end
    end

    desc "current_max_number", "Get the value of the max number that has been confirmed as printed"
    def current_max_number
      puts NumberRecord.max_number_confirmed
    end

    private

    # Calculate the number of labels that will 
    # be generated to fill the given number of 
    # pages
    def total_label_count(n_pages)
      n_pages * LabelGen.configuration.template.labels_per_page
    end

    # Calculate the total count of pages that
    # will be generated by generating the
    # given number of labels.
    def total_page_count(n_labels)
      (n_labels.to_f / LabelGen.configuration.template.labels_per_page).ceil      
    end

    # Indicate if the given number of n_labels
    # will be rendered to fill an exact page
    def fill_exact_pages?(n_labels)
      n_pages = (n_labels.to_f / LabelGen.configuration.template.labels_per_page)
      (n_pages - n_pages.floor) == 0
    end

    # Generate a PDF with the given number of labels
    # and render the output to the path given.
    def render_pdf(n_labels, pages_total, path)
      doc = Page.new(:title => "#{n_labels} Labels Output")
      vals = NumberGenerator.new(n_labels)
      max_number = doc.fill_labels(vals)

      if max_number
        puts "Generated #{n_labels} labels on #{pages_total} pages, ending in number #{max_number}"
        if(doc.pdf.render_file(path))
          puts "PDF output saved in #{path}" 
        else
          puts "PDF output could not be saved to  #{path}"
        end
      else
        puts "Could not render the labels"
      end
    end # render_pdf
    
  end
end
